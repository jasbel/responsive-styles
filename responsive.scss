// ---------------------------------- \\
// Layout Breakpoints
// ---------------------------------- \\
$max-width: 1440px;

// ---------------------------------- \\
// Font Sizes Default Resposive
// ---------------------------------- \\
$font-size-small: 16px;

// ---------------------------------- \\
// Variables for Media queries and B5
// ---------------------------------- \\

//For Mediaquery inline or @include
$xxs: 360;
$xs: 420;
$sm: 576;
$md: 768;
$lg: 992;
$xl: 1200;
$xxl: 1440;
$xxxl: 1650;
$xxxxl: 1950;

// ------------------------------------------ \\
// Responsive Variables for responsive mixins
// ------------------------------------------ \\

//For mixin Responsive
$phone-responsive: $xxs;
$tablet-responsive: $md;
$desktop-responsive: $xxl;

//For Media Query block
$dd: 0.02; //diference
$phone-x-small: $xxs + px;
$phone-small: ($xs - $dd) + px;
$phone: ($sm - $dd) + px;
$phone-large: ($md - $dd) + px;
$tablet-small: 790px;
$tablet: ($lg - $dd) + px;
$desktop-small: 1090px;
$desktop: ($xl - $dd) + px;
$desktop-medium: ($xxl - $dd) + px;
$desktop-large: 1650px;
$desktop-x-large: 1950px;

$phone-default: $phone-x-small; //default
$tablet-default: $tablet;
$desktop-default: $desktop-medium; //default

// ------------------------------------------ \\
// Responsive Mixins
// ------------------------------------------ \\

/// Var:  Prop for responsive global ------------------\\
$property-map: (
  fz: font-size,
  lh: line-height,
  m: margin,
  mt: margin-top,
  mr: margin-right,
  mb: margin-bottom,
  ml: margin-left,
  p: padding,
  pt: padding-top,
  pr: padding-right,
  pb: padding-bottom,
  pl: padding-left,
  t: top,
  l: left,
  b: bottom,
  r: right,
  w: width,
  mw: max-width,
  mxw: max-width,
  maxw: max-width,
  mnw: min-width,
  minw: min-width,
  h: height,
  mh: min-height,
  mnh: min-height,
  minh: min-height,
  mxh: max-height,
  maxh: max-height,
  bz: background-size,
);

/// Schema
/// calc( #{$min-px} + (#{$max} - #{$min}) * ((100vw - #{$w-min-px}) / (#{$w-max} - #{$w-min})));
/// calc( 16px + (21 - 16) * ((100vw - 360px) / (1440 - 360)));

/// Function Responsive ---------------\\
/// How use: padding-left: responsive($pl-max, $pl-min, $w-max, $w-min) ;
@function responsive($max, $min: "", $w-max: $desktop-responsive, $w-min: $phone-responsive ) {
  @if( $min == "" or $max == $min) {
      @return $max + px;
  }
  $min-px: $min + px;
  $w-min-px: $w-min + px;
  $result: calc( #{$min-px} + (#{$max} - #{$min}) * ((100vw - #{$w-min-px}) / (#{$w-max} - #{$w-min})));
  @return $result;
}

/// Mixins Responsive ------------------------\\

//How to use:   @include  font-responsive(26, 20) or font-responsive(26, 20, 1440, 360)
// font-size: calc(16px + (26 - 16) * ((100vw - 300px) / (1600 - 300))) ;
@mixin font-responsive(
  $f-max,
  $f-min: $font-size-small,
  $w-max: $desktop-responsive,
  $w-min: $phone-responsive
) {
  $f-min-px: $f-min + px;
  $w-min-px: $w-min + px;
  $font-size: $f-max + px;
  $desktop-px: $desktop-responsive * 1px;
  $phone-px: $phone-responsive * 1px;

  $result-calc: responsive($f-max, $f-min, $w-max, $w-min);

  font-size: $font-size;

  @if ($w-max == $desktop-responsive and $w-min == $phone-responsive) {
    @media (max-width: $desktop-px) {
      & {
        font-size: $result-calc;
      }
    }
    @media (max-width: $phone-px) {
      & {
        font-size: #{$f-min-px};
      }
    }
  } @else {
    font-size: $result-calc;
    @media (max-width: $w-min-px) {
      & {
        font-size: #{$f-min-px};
      }
    }
  }
}

// How to use:   @include responsive(font-size, 60, 39, 1440, 375) or  @include  responsive(fz, 60, 39, 1440, 375) or  @include  responsive(fz, 60px, 39px, 1440, 375, false)
// @include responsive(h, 66.11, 30);
@mixin responsive(
  $attr: "",
  $size-max: "",
  $size-min: "",
  $w-max: $desktop-responsive,
  $w-min: $phone-responsive,
  $only-med-query: false
) {
  @if $w-max == "" {
    $w-max: $desktop-responsive;
  }

  @if $size-min == "" {
    $size-min: $size-max;
  }

  //conditional if attributes exist px
  /* TODO: Verificar que no crea */
  @if str-index(#{$size-max}, "px") != null {
    $size-max: str-slice(#{$size-max}, 1, str-index(#{$size-max}, "px") - 1);
  }
  @if str-index(#{$size-min}, "px") != null {
    $size-min: str-slice(#{$size-min}, 1, str-index(#{$size-min}, "px") - 1);
  }
  @if str-index(#{$w-max}, "px") != null {
    $w-max: str-slice(#{$w-max}, 1, str-index(#{$w-max}, "px") - 1);
  }
  @if str-index(#{$w-min}, "px") != null {
    $w-min: str-slice(#{$w-min}, 1, str-index(#{$w-min}, "px") - 1);
  }

  $size-max-px: $size-max + px;
  $size-min-px: $size-min + px;
  $w-max-px: $w-max + px;
  $w-min-px: $w-min + px;
  $desktop-px: $desktop-responsive * 1px;
  $phone-px: $phone-responsive * 1px;

  $responsive-calc: calc(
    #{$size-min-px} + (#{$size-max} - #{$size-min}) * ((100vw - #{$w-min-px}) /
          (#{$w-max} - #{$w-min}))
  );

  $property: "";

  @if (map-has-key($property-map, $attr)) {
    $property: map-get($property-map, $attr);
  } @else {
    $property: $attr;
  }

  @if (not $only-med-query) {
    //impress attribute your styles css
    #{$property}: $size-max-px;
  }

  @if ($size-max-px != $size-min-px) {
    @media (max-width: #{$w-max-px}) {
      #{$property}: $responsive-calc;
    }

    @media (max-width: #{$w-min-px}) {
      #{$property}: #{$size-min-px};
    }
  }
}

//TODO: esta repitiendo con la otra responsive, rfatorizar codigo para que no se repita
// Only Responsive Media query inline
//How to use:   @include responsive-mq(fz, 60, 39, 1440) where
// attr: Atributo de la propiedad
// size-max: Valor maximo de la query inicial
// size-min: Valor minimo de la query inicial
// w-max: Pantalla maxima y Media query por defecto
// w-min: Pantalla minima
// two-mq: Si se requiere para la interrupcion de la segunda media query
@mixin responsive-mq(
  $attr: "",
  $size-max: "",
  $size-min: "",
  $w-max: $desktop-responsive,
  $w-min: $phone-responsive,
  $two-mq: false
) {
  @if $size-min == "" {
    $size-min: $size-max;
  }

  //conditional if attributes exist px
  @if str-index(#{$size-max}, "px") != null {
    $size-max: str-slice(#{$size-max}, 1, str-index(#{$size-max}, "px") - 1);
  }
  @if str-index(#{$size-min}, "px") != null {
    $size-min: str-slice(#{$size-min}, 1, str-index(#{$size-min}, "px") - 1);
  }
  @if str-index(#{$w-max}, "px") != null {
    $w-max: str-slice(#{$w-max}, 1, str-index(#{$w-max}, "px") - 1);
  }
  @if str-index(#{$w-min}, "px") != null {
    $w-min: str-slice(#{$w-min}, 1, str-index(#{$w-min}, "px") - 1);
  }

  $size-max-px: $size-max + px;
  $size-min-px: $size-min + px;
  $w-max-px: $w-max + px;
  $w-min-px: $w-min + px;
  $desktop-px: $desktop-responsive * 1px;
  $phone-px: $phone-responsive * 1px;

  $responsive-calc: calc(
    #{$size-min-px} + (#{$size-max} - #{$size-min}) * ((100vw - #{$w-min-px}) /
          (#{$w-max} - #{$w-min}))
  );

  $property: "";

  @if (map-has-key($property-map, $attr)) {
    $property: map-get($property-map, $attr);
  } @else {
    $property: $attr;
  }

  @media (max-width: #{$w-max-px}) {
    #{$property}: $responsive-calc;
  }

  @if ($two-mq) {
    @if ($size-max-px != $size-min-px) {
      @media (max-width: #{$w-min-px}) {
        #{$property}: #{$size-min-px};
      }
    }
  }
}

// Only Responsive Media query inline
// How to use:   @include mq(fz, 60, 1440)
@mixin mq($attr: "", $size: "", $screen: $desktop-responsive) {
  @if str-index(#{$screen}, "px") != null {
    $screen: str-slice(#{$screen}, 1, str-index(#{$screen}, "px") - 1);
  }

  $property: "";

  @if (map-has-key($property-map, $attr)) {
    $property: map-get($property-map, $attr);
  } @else {
    $property: $attr;
  }

  $size-px: "";

  @if (type-of($size) == "string") {
    $size-px: #{$size};
  } @else {
    $px: str-index(#{$size}, "px");
    $em: str-index(#{$size}, "em");
    $rem: str-index(#{$size}, "rem");
    $percent: str-index(#{$size}, "%");

    @if ($em or $rem or $percent or $px) {
      $size-px: #{$size};
    } @else {
      $size-px: $size + px;
    }
  }

  $screen-px: $screen + px;

  @media (max-width: #{$screen-px}) {
    #{$property}: $size-px;
  }
}

@mixin padding-responsive(
  $pt-max: "",
  $pt-min: "",
  $pr-max: "",
  $pr-min: "",
  $pb-max: "",
  $pb-min: "",
  $pl-max: "",
  $pl-min: "",
  $w-max: $desktop-responsive,
  $w-min: $phone-responsive
) {
  @if $pt-max!= "" and $pt-min!= "" {
    padding-top: responsive($pt-max, $pt-min, $w-max, $w-min);
    @if $pr-max!= "" and $pr-min!= "" {
      padding-right: responsive($pr-max, $pr-min, $w-max, $w-min);
      @if $pb-max!= "" and $pb-min!= "" {
        padding-bottom: responsive($pb-max, $pb-min, $w-max, $w-min);
        @if $pl-max!= "" and $pl-min!= "" {
          padding-left: responsive($pl-max, $pl-min, $w-max, $w-min);
        } @else {
          padding-left: responsive($pr-max, $pr-min, $w-max, $w-min);
        }
      } @else {
        padding-bottom: responsive($pt-max, $pt-min, $w-max, $w-min);
        padding-left: responsive($pr-max, $pr-min, $w-max, $w-min);
      }
    } @else {
      padding-right: responsive($pt-max, $pt-min, $w-max, $w-min);
      padding-bottom: responsive($pt-max, $pt-min, $w-max, $w-min);
      padding-left: responsive($pt-max, $pt-min, $w-max, $w-min);
    }
  }
}

@mixin margin-responsive(
  $mt-max: "",
  $mt-min: "",
  $mr-max: "",
  $mr-min: "",
  $mb-max: "",
  $mb-min: "",
  $ml-max: "",
  $ml-min: "",
  $w-max: $desktop-responsive,
  $w-min: $phone-responsive
) {
  @if $mt-max!= "" and $mt-min!= "" {
    @include responsive(mt, $mt-max, $mt-min, $w-max, $w-min);
    @if $mr-max!= "" and $mr-min!= "" {
      @include responsive(mr, $mr-max, $mr-min, $w-max, $w-min);
      @if $mb-max!= "" and $mb-min!= "" {
        @include responsive(mb, $mb-max, $mb-min, $w-max, $w-min);
        @if $ml-max!= "" and $ml-min!= "" {
          @include responsive(ml, $ml-max, $ml-min, $w-max, $w-min);
        } @else {
          @include responsive(ml, $mr-max, $mr-min, $w-max, $w-min);
        }
      } @else {
        @include responsive(mb, $mt-max, $mt-min, $w-max, $w-min);
        @include responsive(ml, $mr-max, $mr-min, $w-max, $w-min);
      }
    } @else {
      @include responsive(mr, $mt-max, $mt-min, $w-max, $w-min);
      @include responsive(mb, $mt-max, $mt-min, $w-max, $w-min);
      @include responsive(ml, $mt-max, $mt-min, $w-max, $w-min);
    }
  }
}
